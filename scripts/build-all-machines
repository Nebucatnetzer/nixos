#!/usr/bin/env -S nix shell .#pkgs.python3 --command python
# -*- mode: python -*-
# Be awayre this code was mainly generated by an LLM!

import datetime
import os
import socket
import subprocess
from pathlib import Path


def get_hosts(devenv_root: str) -> list[str]:
    expr = f"{devenv_root}#nixosConfigurations"
    apply_expr = 'pkgs: builtins.concatStringsSep " " (builtins.attrNames pkgs)'
    cmd = ["nix", "eval", expr, "--apply", apply_expr]
    result = subprocess.run(cmd, check=True, capture_output=True, text=True)
    hosts_str = result.stdout.strip().strip('"')
    return hosts_str.split()


def get_architecture(devenv_root: str, host: str) -> str:
    expr = f"{devenv_root}#nixosConfigurations.{host}.pkgs.system"
    cmd = ["nix", "eval", expr]
    result = subprocess.run(cmd, check=True, capture_output=True, text=True)
    return result.stdout.strip().strip('"')


def build_on_management(devenv_root: str, host: str) -> str:
    print(f"Building {host} on management")
    expr = f"{devenv_root}#nixosConfigurations.{host}.config.system.build.toplevel"
    cmd = ["nix", "build", expr]
    subprocess.run(cmd, check=True)
    return ""  # nix doesn't print paths unless specified, path handled outside


def build_remotely_on_management(devenv_root: str, host: str) -> str:
    print(f"Building {host} remotely on management")
    expr = f"{devenv_root}#nixosConfigurations.{host}.config.system.build.toplevel"
    cmd = [
        "nix",
        "build",
        expr,
        "--eval-store",
        "auto",
        "--store",
        "ssh-ng://management.2li.local",
        "--no-link",
        "--print-out-paths",
    ]
    result = subprocess.run(cmd, check=True, capture_output=True, text=True)
    return result.stdout.strip()


def build_locally(devenv_root: str, host: str) -> str:
    print(f"Building {host} locally")
    expr = f"{devenv_root}#nixosConfigurations.{host}.config.system.build.toplevel"
    cmd = ["nix", "build", expr, "--no-link", "--print-out-paths"]
    result = subprocess.run(cmd, check=True, capture_output=True, text=True)
    store_path = result.stdout.strip()
    subprocess.run(["upload-to-cache", store_path], check=True)
    print()
    return store_path


def create_symlink_and_realize(user: str, store_path: str, build_path: str) -> None:
    print(f"Create symlink for {store_path} at {build_path}")
    ssh_prefix = ["ssh", "-t", f"{user}@management.2li.local"]
    subprocess.run([*ssh_prefix, f"ln -sfn {store_path} {build_path}"], check=True)
    subprocess.run(
        [*ssh_prefix, f"nix-store --add-root {build_path} --realise {build_path}"],
        check=True,
    )
    print("\n")


def main() -> None:
    devenv_root: str = os.environ["DEVENV_ROOT"]
    user: str = os.environ["USER"]
    builds_directory: Path = Path.home() / "builds"
    builds_directory.mkdir(parents=True, exist_ok=True)

    timestamp: str = datetime.datetime.now(tz=datetime.UTC).strftime("%Y%m%d")
    hostname: str = socket.gethostname()

    skip: list[str] = ["desktop-vm", "loki-test", "mobile"]
    hosts: list[str] = get_hosts(devenv_root)

    for host in hosts:
        if host in skip:
            continue

        build_path: Path = builds_directory / f"{timestamp}-{host}"
        architecture: str = get_architecture(devenv_root, host)

        store_path: str = ""

        if hostname == "management" and architecture == "aarch64-linux":
            store_path = build_on_management(devenv_root, host)
        elif hostname != "management" and architecture == "aarch64-linux":
            store_path = build_remotely_on_management(devenv_root, host)
        elif hostname != "management" and architecture == "x86_64-linux":
            store_path = build_locally(devenv_root, host)
        else:
            print(f"Skipping: {host}\n")
            continue

        if store_path:
            create_symlink_and_realize(user, store_path, str(build_path))


if __name__ == "__main__":
    main()
