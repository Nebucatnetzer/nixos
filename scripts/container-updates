# -*- mode: python -*-
#!/usr/bin/env -S nix shell .#pkgs.ripgrep .#pkgs.skopeo .#pkgs.python3 --command python
# Be awayre this code was mainly generated by an LLM!
"""Get the latest three tags for the provided images."""

import re
import subprocess
from typing import List


def run_command(command: List[str]) -> str:
    result = subprocess.run(
        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True, text=True,
    )
    return result.stdout.strip()


def get_digest(image: str) -> str:
    inspect_output = run_command(["skopeo", "inspect", f"docker://{image}:latest"])
    for line in inspect_output.splitlines():
        if '"Digest":' in line:
            return line.split(":", 1)[1].strip().strip('",')
    raise ValueError(f"Digest not found for image: {image}")


def get_tags(image: str) -> List[str]:
    inspect_output = run_command(["skopeo", "inspect", f"docker://{image}"])
    repo_tags = re.findall(r'"RepoTags":\s*\[(.*?)\]', inspect_output, re.DOTALL)
    if not repo_tags:
        return []

    tag_block = repo_tags[0]
    tags = re.findall(r'"(.*?)"', tag_block)

    filtered_tags: List[str] = []
    for tag in tags:
        if "2021" in tag or "61a5a1" in tag:
            continue
        tag_normalized = (
            tag.lower().replace("version-v", "version-").replace("version-", "")
        )
        match = re.match(r"^(\d+)\.(\d+)\.(\d+)$", tag_normalized)
        if match:
            filtered_tags.append(tag_normalized)

    # Sort by semantic versioning descending
    def version_key(s: str):
        return tuple(map(int, s.split(".")))

    filtered_tags.sort(key=version_key, reverse=True)
    return filtered_tags[:3]


def find_image_references(image: str, search_path: str = "./modules") -> str:
    """Find image in code"""
    result = run_command(["rg", image, search_path])
    return result


def main() -> None:
    images: List[str] = [
        "lscr.io/linuxserver/plex",
        "docker.io/fireflyiii/data-importer",
        "docker.io/mailserver/docker-mailserver",
        "docker.io/gitea/gitea",
        "ghcr.io/nebucatnetzer/nextcloud-smb/nextcloud-smb",
        "docker.io/nginx",
    ]

    for image in images:
        print("Get " + image)
        try:
            digest = get_digest(image)
            tags = get_tags(image)
            references = find_image_references(image)

            print(f"Image: {image}")
            print(f"Digest: {digest}")
            print("Tags:")
            for tag in tags:
                print(tag)
            print(references)
            print("\n")

        except subprocess.CalledProcessError as e:
            print(f"Error inspecting image {image}: {e.stderr}")


if __name__ == "__main__":
    main()
