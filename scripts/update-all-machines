#!/usr/bin/env -S nix shell .#pkgs.python3 --command python
# -*- mode: python -*-
# Be awayre this code was mainly generated by an LLM!

import argparse
import os
import shlex
import socket
import subprocess
from pathlib import Path


def get_nixos_hosts() -> list[str]:
    """Retrieve list of nixosConfigurations hosts from nix flakes."""
    cmd = (
        "nix eval .#nixosConfigurations "
        "--apply 'pkgs: builtins.concatStringsSep \" \" (builtins.attrNames pkgs)'"
    )
    result = subprocess.run(
        shlex.split(cmd),
        stdout=subprocess.PIPE,
        text=True,
        cwd="/home/andreas/.nixos",
        check=True,
    )
    return result.stdout.strip().strip('"').split()


def run_rebuild_boot(host: str, fqdn: str) -> None:
    cmd = [
        "nixos-rebuild-ng",
        "boot",
        "-j",
        "auto",
        "--sudo",
        "--target-host",
        fqdn,
        "--flake",
        f".#{host}",
    ]
    print(f"Build boot: {fqdn}")
    subprocess.run(cmd, check=True)
    print("\n")


def run_rebuild_switch(host: str, fqdn: str) -> None:
    """Perform nixos-rebuild-ng switch for the given host."""
    cmd = [
        "nixos-rebuild-ng",
        "switch",
        "-j",
        "auto",
        "--sudo",
        "--target-host",
        fqdn,
        "--flake",
        f".#{host}",
    ]
    print(f"Switch: {fqdn}")
    subprocess.run(cmd, check=True)
    print("\n")


def main() -> None:
    parser = argparse.ArgumentParser(description="NixOS rebuild orchestrator")
    parser.add_argument(
        "-r",
        "--reboot",
        action="store_true",
        help="Reboot after build",
    )
    args = parser.parse_args()

    skip_hosts: list[str] = [
        "desktop-vm",
        "capricorn",
        "gwyn",
        "loki-test",
        "mobile",
        "staubfinger",
        "test-raspi",
        socket.gethostname(),
    ]

    rsa_key: str = Path("~/.nixos/secrets/ssh_keys/ansible/ansible.key").expanduser()
    os.environ["NIX_SSHOPTS"] = f"-i {rsa_key}"

    hosts: list[str] = get_nixos_hosts()

    # First we build all the servers then we reboot them later all at once.
    # This is done so that the servers are still available during building as
    # we need the cache and the proxy.
    for host in hosts:
        if host in skip_hosts:
            continue
        fqdn: str = f"{host}.2li.local"
        if args.reboot:
            run_rebuild_boot(host, fqdn)
        else:
            run_rebuild_switch(host, fqdn)

    if args.reboot:
        for host in hosts:
            if host in skip_hosts:
                continue
            fqdn: str = f"{host}.2li.local"
            print(f"Reboot: {fqdn}")
            subprocess.run(["ssh", "-i", rsa_key, fqdn, "sudo reboot"], check=True)


if __name__ == "__main__":
    main()
